// Code generated by "json-ice --type=OmitemptyPointerStruct"; DO NOT EDIT.

package tests

import (
	"bytes"

	"github.com/moznion/go-json-ice/serializer"
)

func (s *OmitemptyPointerStruct) MarshalJSON() ([]byte, error) {
	var err error
	buff := bytes.NewBuffer([]byte("{"))
	if s.EmptyBool != nil && *s.EmptyBool != false {
		_, err = buff.WriteString("\"empty_bool\"" + ":" + string(serializer.SerializeBool(*s.EmptyBool)) + ",")
		if err != nil {
			return nil, err
		}
	}
	if s.EmptyInt != nil && *s.EmptyInt != 0 {
		_, err = buff.WriteString("\"empty_int\"" + ":" + string(serializer.SerializeInt(int64(*s.EmptyInt))) + ",")
		if err != nil {
			return nil, err
		}
	}
	if s.EmptyUint != nil && *s.EmptyUint != 0 {
		_, err = buff.WriteString("\"empty_uint\"" + ":" + string(serializer.SerializeUint(uint64(*s.EmptyUint))) + ",")
		if err != nil {
			return nil, err
		}
	}
	if s.EmptyFloat != nil && *s.EmptyFloat != 0 {
		_, err = buff.WriteString("\"empty_float\"" + ":" + string(serializer.SerializeFloat(float64(*s.EmptyFloat))) + ",")
		if err != nil {
			return nil, err
		}
	}
	if s.EmptyString != nil && *s.EmptyString != "" {
		_, err = buff.WriteString("\"empty_string\"" + ":" + string(serializer.SerializeString(*s.EmptyString)) + ",")
		if err != nil {
			return nil, err
		}
	}
	if s.NotEmptyString == nil {
		_, err = buff.WriteString("\"not_empty_string\"" + ":" + string(serializer.SerializeNull()) + ",")
		if err != nil {
			return nil, err
		}
	} else {
		_, err = buff.WriteString("\"not_empty_string\"" + ":" + string(serializer.SerializeString(*s.NotEmptyString)) + ",")
		if err != nil {
			return nil, err
		}
	}
	bs := buff.Bytes()
	if bs[len(bs)-1] == ',' {
		bs[len(bs)-1] = '}'
	} else {
		bs = append(bs, '}')
	}
	return bs, nil
}
