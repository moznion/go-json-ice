// Code generated by "json-ice --type=NestedTypes"; DO NOT EDIT.

package tests

func MarshalNestedTypesAsJSON(s *NestedTypes) ([]byte, error) {
	buff := make([]byte, 1, 80)
	buff[0] = '{'
	buff = append(buff, "\"field1\":"...)
	if marshaled, err := s.Field1.MarshalJSON(); err != nil {
		return nil, err
	} else {
		buff = append(buff, marshaled...)
	}

	buff = append(buff, ',')
	if s.Field2 == nil {
		buff = append(buff, "\"field2\":null,"...)
	} else {
		buff = append(buff, "\"field2\":"...)
		if marshaled, err := s.Field2.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buff = append(buff, marshaled...)
		}

		buff = append(buff, ',')
	}
	if s.OmittableField != nil {
		buff = append(buff, "\"omittable_field\":"...)
		if marshaled, err := s.OmittableField.MarshalJSON(); err != nil {
			return nil, err
		} else {
			buff = append(buff, marshaled...)
		}

		buff = append(buff, ',')
	}
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
