// Code generated by "json-ice --type=MapTypes"; DO NOT EDIT.

package tests

import "strconv"

func MarshalMapTypesAsJSON(s *MapTypes) ([]byte, error) {
	buff := make([]byte, 1, 366)
	buff[0] = '{'
	if s.Map == nil {
		buff = append(buff, "\"map\":null,"...)
	} else {
		buff = append(buff, "\"map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.Map {
			buff = strconv.AppendQuote(buff, mapKey)
			buff = append(buff, ':')
			buff = strconv.AppendQuote(buff, mapValue)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if s.MapSlice == nil {
		buff = append(buff, "\"map_slice\":null,"...)
	} else {
		buff = append(buff, "\"map_slice\":"...)
		buff = append(buff, '[')
		for _, v := range s.MapSlice {
			if v == nil {
				buff = append(buff, "null"...)
			} else {
				buff = append(buff, '{')
				for mapKey, mapValue := range v {
					buff = strconv.AppendQuote(buff, mapKey)
					buff = append(buff, ':')
					buff = strconv.AppendQuote(buff, mapValue)
					buff = append(buff, ',')
				}
				if buff[len(buff)-1] == ',' {
					buff[len(buff)-1] = '}'
				} else {
					buff = append(buff, '}')
				}

			}
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}

		buff = append(buff, ',')
	}
	if s.NestedMap == nil {
		buff = append(buff, "\"nested_map\":null,"...)
	} else {
		buff = append(buff, "\"nested_map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.NestedMap {
			buff = strconv.AppendQuote(buff, mapKey)
			buff = append(buff, ':')
			if mapValue == nil {
				buff = append(buff, "null"...)
			} else {
				buff = append(buff, '{')
				for mapKey, mapValue := range mapValue {
					buff = strconv.AppendQuote(buff, mapKey)
					buff = append(buff, ':')
					buff = strconv.AppendQuote(buff, mapValue)
					buff = append(buff, ',')
				}
				if buff[len(buff)-1] == ',' {
					buff[len(buff)-1] = '}'
				} else {
					buff = append(buff, '}')
				}

			}
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if s.IntKeyMap == nil {
		buff = append(buff, "\"int_key_map\":null,"...)
	} else {
		buff = append(buff, "\"int_key_map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.IntKeyMap {
			buff = append(buff, '"')
			buff = strconv.AppendInt(buff, int64(mapKey), 10)
			buff = append(buff, '"')
			buff = append(buff, ':')
			buff = strconv.AppendQuote(buff, mapValue)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if s.SliceValueMap == nil {
		buff = append(buff, "\"slice_value_map\":null,"...)
	} else {
		buff = append(buff, "\"slice_value_map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.SliceValueMap {
			buff = strconv.AppendQuote(buff, mapKey)
			buff = append(buff, ':')
			if mapValue == nil {
				buff = append(buff, "null"...)
			} else {
				buff = append(buff, '[')
				for _, v := range mapValue {
					buff = strconv.AppendQuote(buff, v)
					buff = append(buff, ',')
				}
				if buff[len(buff)-1] == ',' {
					buff[len(buff)-1] = ']'
				} else {
					buff = append(buff, ']')
				}

			}
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if s.PointerValueMap == nil {
		buff = append(buff, "\"pointer_value_map\":null,"...)
	} else {
		buff = append(buff, "\"pointer_value_map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.PointerValueMap {
			buff = strconv.AppendQuote(buff, mapKey)
			buff = append(buff, ':')
			if mapValue == nil {
				buff = append(buff, "null"...)
			} else {
				buff = strconv.AppendQuote(buff, *mapValue)
			}
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if s.NullMap == nil {
		buff = append(buff, "\"null_map\":null,"...)
	} else {
		buff = append(buff, "\"null_map\":"...)
		buff = append(buff, '{')
		for mapKey, mapValue := range s.NullMap {
			buff = strconv.AppendQuote(buff, mapKey)
			buff = append(buff, ':')
			buff = strconv.AppendQuote(buff, mapValue)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = '}'
		} else {
			buff = append(buff, '}')
		}

		buff = append(buff, ',')
	}
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
