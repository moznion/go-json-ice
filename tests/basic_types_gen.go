// Code generated by "json-ice --type=BasicTypes"; DO NOT EDIT.

package tests

import "strconv"

func MarshalBasicTypesAsJSON(s *BasicTypes) ([]byte, error) {
	buff := make([]byte, 1, 366)
	buff[0] = '{'
	buff = append(buff, "\"bool_value\":"...)
	if s.BoolValue {
		buff = append(buff, "true"...)
	} else {
		buff = append(buff, "false"...)
	}

	buff = append(buff, ',')
	buff = append(buff, "\"int_value\":"...)
	buff = strconv.AppendInt(buff, int64(s.IntValue), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"int8_value\":"...)
	buff = strconv.AppendInt(buff, int64(s.Int8Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"int16_value\":"...)
	buff = strconv.AppendInt(buff, int64(s.Int16Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"int32_value\":"...)
	buff = strconv.AppendInt(buff, int64(s.Int32Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"int64_value\":"...)
	buff = strconv.AppendInt(buff, int64(s.Int64Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"uint_value\":"...)
	buff = strconv.AppendUint(buff, uint64(s.UintValue), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"uint8_value\":"...)
	buff = strconv.AppendUint(buff, uint64(s.Uint8Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"uint16_value\":"...)
	buff = strconv.AppendUint(buff, uint64(s.Uint16Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"uint32_value\":"...)
	buff = strconv.AppendUint(buff, uint64(s.Uint32Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"uint64_value\":"...)
	buff = strconv.AppendUint(buff, uint64(s.Uint64Value), 10)
	buff = append(buff, ',')
	buff = append(buff, "\"float32_value\":"...)
	buff = strconv.AppendFloat(buff, float64(s.Float32Value), 'e', -1, 64)
	buff = append(buff, ',')
	buff = append(buff, "\"float64_value\":"...)
	buff = strconv.AppendFloat(buff, float64(s.Float64Value), 'e', -1, 64)
	buff = append(buff, ',')
	buff = append(buff, "\"string_value\":"...)
	buff = strconv.AppendQuote(buff, s.StringValue)
	buff = append(buff, ',')
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
