// Code generated by "json-ice --type=BasicTypes"; DO NOT EDIT.

package tests

import (
	"bytes"

	"github.com/moznion/go-json-ice/serializer"
)

func (s *BasicTypes) MarshalJSON() ([]byte, error) {
	var err error
	initBytes := make([]byte, 1, 500)
	initBytes[0] = '{'
	buff := bytes.NewBuffer(initBytes)
	_, err = buff.WriteString("\"bool_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeBool(s.BoolValue))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"int_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeInt(int64(s.IntValue)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"int8_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeInt(int64(s.Int8Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"int16_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeInt(int64(s.Int16Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"int32_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeInt(int64(s.Int32Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"int64_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeInt(int64(s.Int64Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"uint_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeUint(uint64(s.UintValue)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"uint8_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeUint(uint64(s.Uint8Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"uint16_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeUint(uint64(s.Uint16Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"uint32_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeUint(uint64(s.Uint32Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"uint64_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeUint(uint64(s.Uint64Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"float32_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeFloat(float64(s.Float32Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"float64_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeFloat(float64(s.Float64Value)))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteString("\"string_value\":")
	if err != nil {
		return nil, err
	}
	_, err = buff.Write(serializer.SerializeString(s.StringValue))
	if err != nil {
		return nil, err
	}
	_, err = buff.WriteRune(',')
	if err != nil {
		return nil, err
	}
	bs := buff.Bytes()
	if bs[len(bs)-1] == ',' {
		bs[len(bs)-1] = '}'
	} else {
		bs = append(bs, '}')
	}
	return bs, nil
}
