// Code generated by "json-ice --type=SliceTypes"; DO NOT EDIT.

package tests

import "github.com/moznion/go-json-ice/serializer"

func MarshalSliceTypesAsJSON(s *SliceTypes) ([]byte, error) {
	buff := make([]byte, 1, 500)
	buff[0] = '{'
	if s.StringSlice == nil {
		buff = append(buff, "\"string_slice\":null,"...)
	} else {
		buff = append(buff, "\"string_slice\":"...)
		buff = append(buff, '[')
		for _, v := range s.StringSlice {
			buff = serializer.AppendSerializedString(buff, v)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}
		buff = append(buff, ',')
	}
	if s.StringPointerSlice == nil {
		buff = append(buff, "\"string_pointer_slice\":null,"...)
	} else {
		buff = append(buff, "\"string_pointer_slice\":"...)
		buff = append(buff, '[')
		for _, v := range s.StringPointerSlice {
			buff = serializer.AppendSerializedString(buff, *v)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}
		buff = append(buff, ',')
	}
	if s.EmptySlice == nil {
		buff = append(buff, "\"empty_slice\":null,"...)
	} else {
		buff = append(buff, "\"empty_slice\":"...)
		buff = append(buff, '[')
		for _, v := range s.EmptySlice {
			buff = serializer.AppendSerializedString(buff, v)
			buff = append(buff, ',')
		}
		if buff[len(buff)-1] == ',' {
			buff[len(buff)-1] = ']'
		} else {
			buff = append(buff, ']')
		}
		buff = append(buff, ',')
	}
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
