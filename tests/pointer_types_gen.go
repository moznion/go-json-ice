// Code generated by "json-ice --type=PointerTypes"; DO NOT EDIT.

package tests

import "strconv"

func MarshalPointerTypesAsJSON(s *PointerTypes) ([]byte, error) {
	buff := make([]byte, 1, 366)
	buff[0] = '{'
	if s.BoolValue == nil {
		buff = append(buff, "\"bool_value\":null,"...)
	} else {
		buff = append(buff, "\"bool_value\":"...)
		if *s.BoolValue {
			buff = append(buff, "true"...)
		} else {
			buff = append(buff, "false"...)
		}

		buff = append(buff, ',')
	}
	if s.IntValue == nil {
		buff = append(buff, "\"int_value\":null,"...)
	} else {
		buff = append(buff, "\"int_value\":"...)
		buff = strconv.AppendInt(buff, int64(*s.IntValue), 10)
		buff = append(buff, ',')
	}
	if s.Int8Value == nil {
		buff = append(buff, "\"int8_value\":null,"...)
	} else {
		buff = append(buff, "\"int8_value\":"...)
		buff = strconv.AppendInt(buff, int64(*s.Int8Value), 10)
		buff = append(buff, ',')
	}
	if s.Int16Value == nil {
		buff = append(buff, "\"int16_value\":null,"...)
	} else {
		buff = append(buff, "\"int16_value\":"...)
		buff = strconv.AppendInt(buff, int64(*s.Int16Value), 10)
		buff = append(buff, ',')
	}
	if s.Int32Value == nil {
		buff = append(buff, "\"int32_value\":null,"...)
	} else {
		buff = append(buff, "\"int32_value\":"...)
		buff = strconv.AppendInt(buff, int64(*s.Int32Value), 10)
		buff = append(buff, ',')
	}
	if s.Int64Value == nil {
		buff = append(buff, "\"int64_value\":null,"...)
	} else {
		buff = append(buff, "\"int64_value\":"...)
		buff = strconv.AppendInt(buff, int64(*s.Int64Value), 10)
		buff = append(buff, ',')
	}
	if s.UintValue == nil {
		buff = append(buff, "\"uint_value\":null,"...)
	} else {
		buff = append(buff, "\"uint_value\":"...)
		buff = strconv.AppendUint(buff, uint64(*s.UintValue), 10)
		buff = append(buff, ',')
	}
	if s.Uint8Value == nil {
		buff = append(buff, "\"uint8_value\":null,"...)
	} else {
		buff = append(buff, "\"uint8_value\":"...)
		buff = strconv.AppendUint(buff, uint64(*s.Uint8Value), 10)
		buff = append(buff, ',')
	}
	if s.Uint16Value == nil {
		buff = append(buff, "\"uint16_value\":null,"...)
	} else {
		buff = append(buff, "\"uint16_value\":"...)
		buff = strconv.AppendUint(buff, uint64(*s.Uint16Value), 10)
		buff = append(buff, ',')
	}
	if s.Uint32Value == nil {
		buff = append(buff, "\"uint32_value\":null,"...)
	} else {
		buff = append(buff, "\"uint32_value\":"...)
		buff = strconv.AppendUint(buff, uint64(*s.Uint32Value), 10)
		buff = append(buff, ',')
	}
	if s.Uint64Value == nil {
		buff = append(buff, "\"uint64_value\":null,"...)
	} else {
		buff = append(buff, "\"uint64_value\":"...)
		buff = strconv.AppendUint(buff, uint64(*s.Uint64Value), 10)
		buff = append(buff, ',')
	}
	if s.Float32Value == nil {
		buff = append(buff, "\"float32_value\":null,"...)
	} else {
		buff = append(buff, "\"float32_value\":"...)
		buff = strconv.AppendFloat(buff, float64(*s.Float32Value), 'e', -1, 64)
		buff = append(buff, ',')
	}
	if s.Float64Value == nil {
		buff = append(buff, "\"float64_value\":null,"...)
	} else {
		buff = append(buff, "\"float64_value\":"...)
		buff = strconv.AppendFloat(buff, float64(*s.Float64Value), 'e', -1, 64)
		buff = append(buff, ',')
	}
	if s.StringValue == nil {
		buff = append(buff, "\"string_value\":null,"...)
	} else {
		buff = append(buff, "\"string_value\":"...)
		buff = strconv.AppendQuote(buff, *s.StringValue)
		buff = append(buff, ',')
	}
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
