// Code generated by "json-ice --type=OmitemptyStruct"; DO NOT EDIT.

package tests

import "github.com/moznion/go-json-ice/serializer"

func (s *OmitemptyStruct) MarshalJSON() ([]byte, error) {
	buff := make([]byte, 1, 500)
	buff[0] = '{'
	if s.EmptyBool != false {
		buff = append(buff, "\"empty_bool\":"...)
		buff = append(buff, serializer.SerializeBool(s.EmptyBool)...)
		buff = append(buff, ',')
	}
	if s.EmptyInt != 0 {
		buff = append(buff, "\"empty_int\":"...)
		buff = append(buff, serializer.SerializeInt(int64(s.EmptyInt))...)
		buff = append(buff, ',')
	}
	if s.EmptyUint != 0 {
		buff = append(buff, "\"empty_uint\":"...)
		buff = append(buff, serializer.SerializeUint(uint64(s.EmptyUint))...)
		buff = append(buff, ',')
	}
	if s.EmptyFloat != 0 {
		buff = append(buff, "\"empty_float\":"...)
		buff = append(buff, serializer.SerializeFloat(float64(s.EmptyFloat))...)
		buff = append(buff, ',')
	}
	if s.EmptyString != "" {
		buff = append(buff, "\"empty_string\":"...)
		buff = append(buff, serializer.SerializeString(s.EmptyString)...)
		buff = append(buff, ',')
	}
	buff = append(buff, "\"not_empty_string\":"...)
	buff = append(buff, serializer.SerializeString(s.NotEmptyString)...)
	buff = append(buff, ',')
	if buff[len(buff)-1] == ',' {
		buff[len(buff)-1] = '}'
	} else {
		buff = append(buff, '}')
	}
	return buff, nil
}
